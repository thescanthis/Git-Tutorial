깃허브 명령프롬프트 명령어 사용법.

git -> git의 사용법이나온다.(전부영어임)
git --version 깃의 버전이나옴(낮으면 업데이트를 해야함.)
git config --global user.name thescanthis ->내가쓸수있게 초기화를 함
git config --global user.email thescanthis@gmail.com ->이메일도 초기화

이렇게한 후 깃허브의 Hash코드를 복사해서
cd(Change Directory)디렉토리 변경
cd C:\깃허브 Tutorial(c드라이브에 내가 만든 폴더를 동기화시킨다.)
git clone(깃허브와 내컴퓨터를 문서등 파일들을 다운로드 할 수있게 만든다.)
git add 파일을 더한다.(git에는 업로드가 안됨, 이렇게 더한 후 push를 사용해서 업로드를함.)
gitcommit -m "언제보냈는지 알려주기위해 오류가 낫을경우 찾을수있게 표기 할수있음."
git push 깃에 파일등을 보내겠다는 명령어임.

git clone https://github.com/thescanthis/Git-Tutorial.git
(내 깃허브에 다운로드 할수있게 만듬)
이렇게하면 git이라는 폴더가 보이는데 (안보이면 보기 -> 옵션에서 숨김파일 해제)
이렇게 만든 저장소를 컴퓨터에 만들어서 로컬리포지터리,깃에있는건 리모트리포지터리라고함.

ex)텍스트 파일을 한개만듬.
cd Git-Tutorial
git add discode.txt
git commit -m "Add Text File[discode.txt]" 내가 언제파일을 업로드했는지 알려주기위해.
이렇게 한후 
git push 하고 깃사이트를 새로고침하면 업로드가된다.
--------------------------------------------------------------------------------------------------------
2강

1.새로운 폴더를 만든다 ->내가만든건 깃허브 Tutorials.
2.그 폴더를 클론을 통해 가지고온다. 그럼 맨처음 내가만든 Tutorial과Tutorials를 복사해옴.
3.그 후 dir이라는 명령어를 수행하면, 어떤 파일이 있는지 알려줌.
4. 새로운 텍스트 파일을 만들어 거기에 c언어 코드를 만들었다.
5. 그후 git status 라는 명령어를 쓰면,특정파일이 추가가 되었다는말이나옴.
(그러면서 깃에 커밋을 추가할 수 있다는 메세지도 같이나옴)
6.그리고 추가한 file을 git add로 추가.(추가할때 문서의종류까지.txt .world)등.
7.다시git status를 하면 초록색으로 나오면 추가가됫다는거임.
8.만약 그파일이 업로드되야하는게 아니였다면
->git reset (이름)My_Code.py.txt 를 하면 리셋이된다.
9.그후 다시git status를 누르면 빨간색으로 업로드로 추가될 파일이있다고 말해준다.(리셋이된거임)
10.만약 git add에 많은양의 파일을 추가하고자 한다면 git add .을 하면 모두 추가가된다.
11.add후 commit까지했고,push까지 전부해서 업로드했는데 수정해야할 이벤트가 있다면,
-> 그 file로 들어가서 소스코드를 작성후 저장한다음 git status를 하면
(파일이 변경됫다는 문구와함께 그파일을 덮어쓸것인가,아니면 무시할것인가 말해줌)
12. 만약git checkout -- My.Code.py.txt 를한다면 그전단계로 돌아간다.
13.그게아니라면 git add 를 이용하여 추가함.
14 commit을 했는데 여기서 실수한것이 있다면, git commit --amend를 이용하면
->commit을위해 내가작성한 글들을 수정할 수 있다.(자세한 내용은 더가서 배운다함.)

1.cd C:\깃허브 Tutorials
2.git clone https://github.com/thescanthis/Git-Tutorial.git
3.dir
4.텍스트문서에서 다른함수를 추가했을때.
5.git status(추가된 file나옴)->[git add]->git status(추가했다면 초록문구)
6.만약 파일을 잘못 추가했다면 git reset->git status확인(추가 file이있다고 나옴)
7.git add를 하면 추가가됨,git checkout -- 를하면 그전단계로 돌아감.
8.추가를해서 commit -m까지했는데 여기서 잘못 쳣다면 git commit --amend로 내용수정
(수정은 나중에 배운다고 나옴)
9.git push 있지말고 할 것.
--------------------------------------------------------------------------------------------------------
3강(commit 내용 수정)

1.일단 동기화가 되어있다고 가정한 후 git pull을 이용하여 파일과 깃이 동일하게 맞춰준다.
2.수정을 하기위해 함수코드에 특정코드를 추가시키고add 를해준다.
3.commit으로 추가를 시켜줌
4.git push로 깃허브에 반영시켜준다.(반영된 내용은 git log로 확인이 가능함. 빠져나올땐q)
5.만약 맨처음으로 돌아가서 확인을 하고싶다면 git reset log의 해시값을 복사해준다.
ex) git reset --hard 7215064c53b0b1710ba6c745ae4e427b38e0ab13(이게 해시값임)
hard를 입력하면 그 이후에 일어났던 모든 것들을 없던것으로 reset 하겠다는 의미임.
(hard말고도 soft,mixd라는 옵션도있음)
7.git log를 다시누르면 그전으로 돌아간걸 확인할 수 있음.
8.이렇게 하면 깃과 내파일의 구성이 완전히 다르기에 git push를 사용할 수 없다.
(하지만 git push -f 하게되면 강제로 푸쉬를 하게되고 깃과 내파일의목록을 일치하게 함.)
9.다시 My_Code를만들고 add -> commit -> push를하고
10. 텍스트로가서 함수를 한개더 추가함
11.그리고 git commit --amend 후 엔터를 누르면 내가쓴내용으로 이동이되는데 수정을 가능.
수정모드는 a를 누르면 아래insert가 나오면 수정가능 다 했으면 :wq!를 하면 종료하고 나감.

1.git pull
2.git add .
3.git commit -m"Add My_Code[mul]"
4.git push
5.git log->내역확인후 그만보고싶을땐->q를 누름
6.git reset --hard  7215064c53b0b1710ba6c745ae4e427b38e0ab13
7.git log
8.git push -f 강제로 푸쉬하게함.
9.text파일에 함수를 추가->add -> commit -> push
10. 이후 다시 함수를 추가후git commit --amend를하면 commit의 내용을 수정할수있음
11.수정이후 git push -f를 하면 깃 사이트에도 추가가됨.